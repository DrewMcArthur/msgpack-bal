public function getTestCases() returns TestCase[][] {
    return [
        [{"input": null, "output": [0xc0]}],
        [{"input": false, "output": [0xc2]}],
        [{"input": true, "output": [0xc3]}],
        ...intTestCases,
        ...strTestCases,
        ...arrayTestCases,
        ...mapTestCases,
        ...binTestCases
    ];
}

TestCase[][] intTestCases = [
    [{"input": 0, "output": [0x00]}],
    [{"input": 1, "output": [0x01]}],
    [{"input": 127, "output": [0x7f]}],
    [{"input": -1, "output": [0xff]}],
    [{"input": -32, "output": [0xe0]}],
    [{"input": 128, "output": [0xcc, 0x80]}],
    [{"input": 255, "output": [0xcc, 0xff]}],
    [{"input": 256, "output": [0xcd, 0x01, 0x00]}],
    [{"input": 65535, "output": [0xcd, 0xff, 0xff]}],
    [{"input": 65536, "output": [0xce, 0x00, 0x01, 0x00, 0x00]}],
    [{"input": 65537, "output": [0xce, 0x00, 0x01, 0x00, 0x01]}],
    [{"input": 11111111111, "output": [0xcf, 0x00, 0x00, 0x00, 0x02, 0x96, 0x46, 0x19, 0xc7]}],
    [{"input": 1111111111111111168, "output": [0xcf, 0x0f, 0x6b, 0x75, 0xab, 0x2b, 0xc4, 0x72, 0x00]}],
    [{"input": 9223372036854775807, "output": [0xcf, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]}],
    [{"input": -33, "output": [0xd0, 0xdf]}],
    [{"input": -40, "output": [0xd0, 0xd8]}],
    [{"input": -127, "output": [0xd0, 0x81]}],
    [{"input": -128, "output": [0xd1, 0xff, 0x80]}],
    [{"input": -405, "output": [0xd1, 0xfe, 0x6b]}],
    [{"input": -32767, "output": [0xd1, 0x80, 0x01]}],
    [{"input": -32768, "output": [0xd2, 0xff, 0xff, 0x80, 0x00]}],
    [{"input": -32769, "output": [0xd2, 0xff, 0xff, 0x7f, 0xff]}],
    ...SignedInt64TestCases
];

// saving this test case for later: encoding works, 
// but currently trying to run decode([0xd3, ...]) will fail, 
// because 0xd3 == signed Int64, and our algorithm fails.
// this is because we calculat an int, then subtract (1 << 8*nBytes), and 
// if nBytes == 8, we would try to 1 << 64, which doesn't work with 64-bit ints.
TestCase[][] SignedInt64TestCases = [
    [{"input": -11111111111, "output": [0xd3, 0xff, 0xff, 0xff, 0xfd, 0x69, 0xb9, 0xe6, 0x39]}],
    [{"input": -9223372036854775807, "output": [0xd3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01]}]
];

TestCase[][] strTestCases = [
    [{"input": "", "output": [0xa0]}],
    [{"input": "A", "output": [0xa1, 0x41]}],
    [{"input": "ab", "output": [0xa2, 0x61, 0x62]}],
    [{"input": "short string, under 31 bytes!", "output": [0xbd, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x33, 0x31, 0x20, 0x62, 0x79, 0x74, 0x65, 0x73, 0x21]}],
    [{"input": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "output": [0xbf, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61]}],
    [{"input": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "output": [0xd9, 0x20, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61]}],
    [{"input": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "output": [0xd9, 0x21, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61]}],
    [{"input": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "output": [0xda, 0x01, 0x00, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61]}]
];

TestCase[][] arrayTestCases = [
    [{"input": [], "output": [0x90]}],
    [{"input": [0], "output": [0x91, 0x00]}],
    [{"input": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "output": [0xdc, 0x00, 0x10, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01]}],
    arrayOfMapsTestCase
];

TestCase[][] mapTestCases = [
    [{"input": {}, "output": [0x80]}],
    [{"input": {"a": "b"}, "output": [0x81, 0xa1, 0x61, 0xa1, 0x62]}],
    [{"input": {"id": 0}, "output": [0x81, 0xa2, 0x69, 0x64, 0x00]}],
    [{"input": {"tester": "testing", "true": true, "false": false, "null": null, "emptyArray": [], "array": [0, 1, 2, 3, 4, 5, 6], "a": 0, "b": 99}, "output": [0x88, 0xa6, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0xa7, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0xa4, 0x74, 0x72, 0x75, 0x65, 0xc3, 0xa5, 0x66, 0x61, 0x6c, 0x73, 0x65, 0xc2, 0xa4, 0x6e, 0x75, 0x6c, 0x6c, 0xc0, 0xaa, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x41, 0x72, 0x72, 0x61, 0x79, 0x90, 0xa5, 0x61, 0x72, 0x72, 0x61, 0x79, 0x97, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0xa1, 0x61, 0x00, 0xa1, 0x62, 0x63]}],
    map16TestCase
];

TestCase[] arrayOfMapsTestCase = [
    {"input": [{}, {"a": 0}, {"a": 1, "b": 2}, {"bigger key than expected, i mean really really really big": null}], "output": [0x94, 0x80, 0x81, 0xa1, 0x61, 0x00, 0x82, 0xa1, 0x61, 0x01, 0xa1, 0x62, 0x02, 0x81, 0xd9, 0x39, 0x62, 0x69, 0x67, 0x67, 0x65, 0x72, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x2c, 0x20, 0x69, 0x20, 0x6d, 0x65, 0x61, 0x6e, 0x20, 0x72, 0x65, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x72, 0x65, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x72, 0x65, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x62, 0x69, 0x67, 0xc0]}
];

TestCase[] map16TestCase = [
    {
        "input": {"a": "a", "b": "a", "c": "a", "d": "a", "e": "a", "f": "a", "g": "a", "h": "a", "i": "a", "j": "a", "k": "a", "l": "a", "m": "a", "n": "a", "o": "a", "p": "a"},
        "output": [0xde, 0x00, 0x10, 0xa1, 0x61, 0xa1, 0x61, 0xa1, 0x62, 0xa1, 0x61, 0xa1, 0x63, 0xa1, 0x61, 0xa1, 0x64, 0xa1, 0x61, 0xa1, 0x65, 0xa1, 0x61, 0xa1, 0x66, 0xa1, 0x61, 0xa1, 0x67, 0xa1, 0x61, 0xa1, 0x68, 0xa1, 0x61, 0xa1, 0x69, 0xa1, 0x61, 0xa1, 0x6a, 0xa1, 0x61, 0xa1, 0x6b, 0xa1, 0x61, 0xa1, 0x6c, 0xa1, 0x61, 0xa1, 0x6d, 0xa1, 0x61, 0xa1, 0x6e, 0xa1, 0x61, 0xa1, 0x6f, 0xa1, 0x61, 0xa1, 0x70, 0xa1, 0x61]
    }
];

// i'm not able to paste a map this big into the website, so i don't have any output to compare for now.
TestCase[] map32TestCase = [{"input": generateMapTestCaseInput(2 << 16), "output": []}];

function generateMapTestCaseInput(int nItems) returns map<int> {
    map<int> out = {};
    int i = 0;
    while i < nItems {
        i = i + 1;
        out[i.toBalString()] = 0;
    }
    return out;
}

TestCase[][] binTestCases = [
    [
        {
            "input": {
                "type": "response",
                "id": 0,
                "data": <byte[]>[0x82, 0xa4, 0x74, 0x79, 0x70, 0x65, 0xa5, 0x65, 0x72, 0x72, 0x6f, 0x72, 0xa4, 0x64, 0x61, 0x74, 0x61, 0x82, 0xa4, 0x74, 0x79, 0x70, 0x65, 0xaf, 0x64, 0x65, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xa4, 0x64, 0x61, 0x74, 0x61, 0xd9, 0x2a, 0x42, 0x79, 0x74, 0x65, 0x73, 0x28, 0x44, 0x65, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x28, 0x22, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x60, 0x74, 0x79, 0x70, 0x65, 0x60, 0x22, 0x29, 0x29]
            },
            "output": [0x83, 0xa4, 0x74, 0x79, 0x70, 0x65, 0xa8, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0xa2, 0x69, 0x64, 0x0, 0xa4, 0x64, 0x61, 0x74, 0x61, 0xc4, 0x58, 0x82, 0xa4, 0x74, 0x79, 0x70, 0x65, 0xa5, 0x65, 0x72, 0x72, 0x6f, 0x72, 0xa4, 0x64, 0x61, 0x74, 0x61, 0x82, 0xa4, 0x74, 0x79, 0x70, 0x65, 0xaf, 0x64, 0x65, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xa4, 0x64, 0x61, 0x74, 0x61, 0xd9, 0x2a, 0x42, 0x79, 0x74, 0x65, 0x73, 0x28, 0x44, 0x65, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x28, 0x22, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x60, 0x74, 0x79, 0x70, 0x65, 0x60, 0x22, 0x29, 0x29]
        }
    ],
    [
        {
            "input": {
                "type": "error",
                "data": {
                    "type": "deserialization",
                    "data": "Bytes(Deserialize(\"missing field `type`\"))"
                }
            },
            "output": [0x82, 0xa4, 0x74, 0x79, 0x70, 0x65, 0xa5, 0x65, 0x72, 0x72, 0x6f, 0x72, 0xa4, 0x64, 0x61, 0x74, 0x61, 0x82, 0xa4, 0x74, 0x79, 0x70, 0x65, 0xaf, 0x64, 0x65, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xa4, 0x64, 0x61, 0x74, 0x61, 0xd9, 0x2a, 0x42, 0x79, 0x74, 0x65, 0x73, 0x28, 0x44, 0x65, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x28, 0x22, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x60, 0x74, 0x79, 0x70, 0x65, 0x60, 0x22, 0x29, 0x29]
        }
    ]
];
